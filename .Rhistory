#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (i == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
print("lol")
return(list("stats" = sim_results, "data" = ans_means))
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
run_simulation <-function(runs,n_candidates, objective_function, objective_function_name){
p = 3 # degree of splines used
unconstrained_errors <- character(runs)
constrained_errors <- character(runs)
#ans_list <- list(length(n_candidates))
j = 0
#unconstrained_errors_data <- character(runs)
#constrained_errors_data <- character(runs)
# Create the data frames.
sim_results <- data.frame(
runs="",
datapoints="",
knots="",
objective_function="",
#constrained_errors_data="",
#unconstrained_errors_data="",
constrained_errors = "",
unconstrained_errors = "",
#time
stringsAsFactors = FALSE
)
for (n in n_candidates){
print("enters for")
print("j equals:")
print(j)
j = j + 1
for (i in 1:runs) {
print("enter runs")
x = runif(n)
y = objective_function(x) + rnorm(n)
#print("we get to penspl")
ans = penspl(5,x,y,round(3 * (n^(1/(2*p + 3))),digits = 0),3,2.5)
if (i == 1){
ans_mean = ans
}
else{
ans_mean = add_ans(ans_mean,ans)
}
#x = find_x_new(ans$xpl,x)
y_clean = objective_function(ans$xpl)
#y_clean_data = objective_function(x)
#y_constrained_data = find_y(ans$xpl,ans$cpl,x)
#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (j == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results
sim_results$stats
run_simulation <-function(runs,n_candidates, objective_function, objective_function_name){
p = 3 # degree of splines used
unconstrained_errors <- character(runs)
constrained_errors <- character(runs)
#ans_list <- list(length(n_candidates))
j = 0
#unconstrained_errors_data <- character(runs)
#constrained_errors_data <- character(runs)
# Create the data frames.
sim_results <- data.frame(
runs="",
datapoints="",
knots="",
objective_function="",
#constrained_errors_data="",
#unconstrained_errors_data="",
constrained_errors = "",
unconstrained_errors = "",
#time
stringsAsFactors = FALSE
)
for (n in n_candidates){
print("enters for")
print("j equals:")
print(j)
j = j + 1
for (i in 1:runs) {
print("enter runs")
x = runif(n)
y = objective_function(x) + rnorm(n)
#print("we get to penspl")
ans = penspl(5,x,y,round(3 * (n^(1/(2*p + 3))),digits = 0),3,2.5)
if (i == 1){
ans_mean = ans
}
else{
ans_mean = add_ans(ans_mean,ans)
}
#x = find_x_new(ans$xpl,x)
y_clean = objective_function(ans$xpl)
#y_clean_data = objective_function(x)
#y_constrained_data = find_y(ans$xpl,ans$cpl,x)
#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (j == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
print("lol")
return(list("stats" = sim_results, "data" = ans_means))
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
# how many times do we run the simulation
runs = 10
# how many datapoint in each run
n_candidates = c(50,100)
run_simulation <-function(runs,n_candidates, objective_function, objective_function_name){
p = 3 # degree of splines used
unconstrained_errors <- character(runs)
constrained_errors <- character(runs)
#ans_list <- list(length(n_candidates))
j = 0
#unconstrained_errors_data <- character(runs)
#constrained_errors_data <- character(runs)
# Create the data frames.
sim_results <- data.frame(
runs="",
datapoints="",
knots="",
objective_function="",
#constrained_errors_data="",
#unconstrained_errors_data="",
constrained_errors = "",
unconstrained_errors = "",
#time
stringsAsFactors = FALSE
)
for (n in n_candidates){
print("enters for")
print("j equals:")
print(j)
j = j + 1
for (i in 1:runs) {
print("enter runs")
x = runif(n)
y = objective_function(x) + rnorm(n)
#print("we get to penspl")
ans = penspl(5,x,y,round(3 * (n^(1/(2*p + 3))),digits = 0),3,2.5)
if (i == 1){
ans_mean = ans
}
else{
ans_mean = add_ans(ans_mean,ans)
}
#x = find_x_new(ans$xpl,x)
y_clean = objective_function(ans$xpl)
#y_clean_data = objective_function(x)
#y_constrained_data = find_y(ans$xpl,ans$cpl,x)
#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (j == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
print("lol")
return(list("stats" = sim_results, "data" = ans_means))
}
function_1 <- function(x){
return(x^3)
}
function_1_name = "x-> x^3"
function_2 <- function(x){
return(-0.005*x +3)
}
function_2_name = "x -> -0.005*x +3"
function_3 <- function(x){
return(2+x^3-0.2*x)
}
function_3_name = "x -> x^3 - 0.2x + 2"
function_4 <- function(x){
return(-x^3)
}
function_4_name = "x -> -x^3"
objective_functions = list(
list(function(x) function_1(x),name = function_1_name),
list(f = function(x) function_2(x),name = function_2_name),
list(f = function(x) function_3(x),name = function_3_name),
list(f = function(x) function_4(x),name = function_4_name)
)
objective_functions_2 = list(
function(x) function_1(x),
function(x) function_2(x),
function(x) function_3(x)
)
objective_functions_2[[1]](2)
objective_functions[[1]][[1]](2)
function_0 <- function(x){
return(x + 1)
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
run_simulation <-function(runs,n_candidates, objective_function, objective_function_name){
p = 3 # degree of splines used
unconstrained_errors <- character(runs)
constrained_errors <- character(runs)
#ans_list <- list(length(n_candidates))
j = 0
#unconstrained_errors_data <- character(runs)
#constrained_errors_data <- character(runs)
# Create the data frames.
sim_results <- data.frame(
runs="",
datapoints="",
knots="",
objective_function="",
#constrained_errors_data="",
#unconstrained_errors_data="",
constrained_errors = "",
unconstrained_errors = "",
#time
stringsAsFactors = FALSE
)
for (n in n_candidates){
print("enters for")
print("j equals:")
print(j)
j = j + 1
for (i in 1:runs) {
print("enter runs")
x = runif(n)
y = objective_function(x) + rnorm(n)
#print("we get to penspl")
ans = penspl(5,x,y,round(3 * (n^(1/(2*p + 3))),digits = 0),3,2.5)
if (i == 1){
ans_mean = ans
}
else{
ans_mean = add_ans(ans_mean,ans)
}
#x = find_x_new(ans$xpl,x)
y_clean = objective_function(ans$xpl)
#y_clean_data = objective_function(x)
#y_constrained_data = find_y(ans$xpl,ans$cpl,x)
#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (j == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
print("lol")
return(list("stats" = sim_results, "data" = ans_means))
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")$stats
sim_results
# how many times do we run the simulation
runs = 10
# how many datapoint in each run
n_candidates = c(50,100)
run_simulation <-function(runs,n_candidates, objective_function, objective_function_name){
p = 3 # degree of splines used
unconstrained_errors <- character(runs)
constrained_errors <- character(runs)
#ans_list <- list(length(n_candidates))
j = 0
#unconstrained_errors_data <- character(runs)
#constrained_errors_data <- character(runs)
# Create the data frames.
sim_results <- data.frame(
runs="",
datapoints="",
knots="",
objective_function="",
#constrained_errors_data="",
#unconstrained_errors_data="",
constrained_errors = "",
unconstrained_errors = "",
#time
stringsAsFactors = FALSE
)
for (n in n_candidates){
print("enters for")
print("j equals:")
print(j)
j = j + 1
for (i in 1:runs) {
print("enter runs")
x = runif(n)
y = objective_function(x) + rnorm(n)
#print("we get to penspl")
ans = penspl(5,x,y,round(3 * (n^(1/(2*p + 3))),digits = 0),3,2.5)
if (i == 1){
ans_mean = ans
}
else{
ans_mean = add_ans(ans_mean,ans)
}
#x = find_x_new(ans$xpl,x)
y_clean = objective_function(ans$xpl)
#y_clean_data = objective_function(x)
#y_constrained_data = find_y(ans$xpl,ans$cpl,x)
#y_unconstrained_data = find_y(ans$xpl,ans$ucpl,x)
#constrained_errors_data[i] = mean(abs(y_constrained_data - y_clean_data))
#unconstrained_errors_data[i] = mean(abs(y_unconstrained_data - y_clean_data))
constrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$cpl))
unconstrained_errors[i] = mean(abs(objective_function(ans$xpl)-ans$ucpl))
}
unconstrained_errors = mean(as.numeric(unconstrained_errors))
constrained_errors = mean(as.numeric(constrained_errors))
#unconstrained_errors_data = as.numeric(unconstrained_errors_data)
#constrained_errors_data = as.numeric(constrained_errors_data)
#unc_errors_data = mean(unconstrained_errors_data)
#con_errors_data =mean(constrained_errors_data)
if (j == 1){
print("ans_means defined")
ans_means = list(ans_mean)
}
else{
ans_means = c(ans_means, ans_mean)
}
sim_results = rbind(sim_results, data.frame(
runs = runs,
datapoints = n,
knots = round(3*(n^(1/(2*p + 3)))),
objective_function = c(objective_function_name),
#constrained_errors_data = c(con_errors_data),
#unconstrained_errors_data = c(unc_errors_data),
constrained_errors = c(constrained_errors),
unconstrained_errors = c(unconstrained_errors),
#time
stringsAsFactors = FALSE)
)
}
print("lol")
return(sim_results)
}
function_1 <- function(x){
return(x^3)
}
function_1_name = "x-> x^3"
function_2 <- function(x){
return(-0.005*x +3)
}
function_2_name = "x -> -0.005*x +3"
function_3 <- function(x){
return(2+x^3-0.2*x)
}
function_3_name = "x -> x^3 - 0.2x + 2"
function_4 <- function(x){
return(-x^3)
}
function_4_name = "x -> -x^3"
objective_functions = list(
list(function(x) function_1(x),name = function_1_name),
list(f = function(x) function_2(x),name = function_2_name),
list(f = function(x) function_3(x),name = function_3_name),
list(f = function(x) function_4(x),name = function_4_name)
)
objective_functions_2 = list(
function(x) function_1(x),
function(x) function_2(x),
function(x) function_3(x)
)
objective_functions_2[[1]](2)
objective_functions[[1]][[1]](2)
function_0 <- function(x){
return(x + 1)
}
sim_results = run_simulation(runs,n_candidates,function_0,"x -> x + 1")
sim_results
sim_results
print(sim_results)
print(sim_results)
